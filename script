import tensorflow as tf
from tensorflow import keras
from keras.layers import Input, Dense, Conv2D, MaxPooling2D, AveragePooling2D, Flatten, Dropout, BatchNormalization, Activation
from keras.activations import relu, sigmoid
from keras.optimizers import Adam
import keras_tuner
import pandas as pd
import numpy as np
import os
from sklearn.model_selection import train_test_split
from keras.preprocessing.image import ImageDataGenerator
from PIL import Image
import math

faulty_ids = [
    '9369c7278ec8bcc6c880d99194de09fc2bd4efbe', 
    'f6f1d771d14f7129a6c3ac2c220d90992c30c10b', 
    '9071b424ec2e84deeb59b54d2450a6d0172cf701', 
    'c448cd6574108cf14514ad5bc27c0b2c97fc1a83', 
    '54df3640d17119486e5c5f98019d2a92736feabc', 
    '5f30d325d895d873d3e72a82ffc0101c45cba4a8', 
    '5a268c0241b8510465cb002c4452d63fec71028a'
]

root_dir = os.path.abspath(os.path.dirname(__file__))
test_df = pd.read_csv(os.path.join(root_dir, 'input', 'sample_submission.csv'))
x_test = test_df['id'].astype(str).to_numpy()
test_img_names = test_df['id'].astype(str).to_numpy()
train_df = pd.read_csv(os.path.join(root_dir, 'input', 'train_labels.csv'))
train_df = train_df[~train_df['id'].isin(faulty_ids)]
train_img_names = train_df['id'].astype(str).to_numpy()
y_train = train_df['label'].astype(float).to_numpy()
x_train, x_val, y_train, y_val = train_test_split(train_img_names, y_train, test_size=0.20, random_state=453)

train_datagen = ImageDataGenerator( 
    rescale=1. / 255, 
    horizontal_flip=True,
    vertical_flip=True
    ) 
test_datagen = ImageDataGenerator(rescale=1. / 255) 

# Input
model = keras.Sequential()
model.add(Input(shape=(96, 96, 3)))
# Feature extractor
model.add(Conv2D(128, (3, 3)))
model.add(Activation(relu))
model.add(MaxPooling2D())
model.add(Activation(relu))
model.add(Conv2D(64, (3, 3)))
model.add(Activation(relu))
model.add(MaxPooling2D())
model.add(Activation(relu))
model.add(Conv2D(64, (3, 3)))
model.add(Activation(relu))
model.add(MaxPooling2D())
model.add(Activation(relu))
# Classifier
model.add(Flatten())
model.add(Dense(32))
model.add(Activation(relu))
model.add(Dense(32))
model.add(Activation(relu))
model.add(Dense(32))
model.add(Activation(relu))
model.add(Dense(1))
model.add(Activation(sigmoid))
# Compilation
model.compile(
    loss='binary_crossentropy', 
    optimizer=Adam(learning_rate = 0.00032837213634908643), 
    metrics=['accuracy']
)

train_generator = train_datagen.flow_from_directory( 
    os.path.join(root_dir, 'input', f'train_labeled'), 
    target_size=(96, 96), 
    batch_size=64, 
    class_mode='binary'
) 
test_generator = test_datagen.flow_from_directory( 
    os.path.join(root_dir, 'input', f'test_original'), 
    target_size=(96, 96), 
    batch_size=64, 
    class_mode=None,
    shuffle=False
) 
model.fit(
        train_generator,
        epochs=16)
model.save('cancer_model')
